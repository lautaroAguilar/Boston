generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model company {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(100)
  cuit               String    @unique(map: "cuit") @db.VarChar(20)
  business_name      String    @unique(map: "business_name") @db.VarChar(150)
  first_survey_link  String?   @db.Text
  second_survey_link String?   @db.Text
  created_at         DateTime? @default(now()) @db.Timestamp(0)
  updated_at         DateTime? @default(now()) @db.Timestamp(0)
  contacts           company_contact[]
  cost_centers       cost_center[]
  sectors            sector[]
  students           students[]
  groups             Group[]
  schedules          Schedule[]
}

model company_contact {
  id         Int       @id @default(autoincrement())
  company_id Int
  name       String    @db.VarChar(100)
  email      String    @unique(map: "email") @db.VarChar(100)
  notes      String?   @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  company    company   @relation(fields: [company_id], references: [id])

  @@index([company_id], map: "company_id")
}

model cost_center {
  id         Int       @id @default(autoincrement())
  company_id Int
  name       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  company    company   @relation(fields: [company_id], references: [id])

  @@index([company_id], map: "company_id")
}

model languages {
  id               Int              @id @default(autoincrement())
  name             String           @unique(map: "name") @db.VarChar(50)
  teacherLanguages TeacherLanguages[]
  progress         student_progress[]
  enrollments      CourseEnrollment[]
  groups           Group[]
}

model modules {
  id               Int              @id @default(autoincrement())
  name             String           @unique(map: "name") @db.VarChar(100)
  progress         student_progress[]
  enrollments      CourseEnrollment[]
  groups           Group[]
}

model roles {
  id   Int    @id @default(autoincrement())
  name String @unique(map: "name") @db.VarChar(100)
}

model sector {
  id         Int       @id @default(autoincrement())
  company_id Int
  name       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  company    company   @relation(fields: [company_id], references: [id])

  @@index([company_id], map: "company_id")
}

model student_progress {
  id          Int       @id @default(autoincrement())
  student_id  Int
  language_id Int
  module_id   Int
  start_date  DateTime  @db.Date
  end_date    DateTime? @db.Date
  is_current  Boolean   @default(true)
  student     students  @relation(fields: [student_id], references: [id])
  language    languages @relation(fields: [language_id], references: [id])
  module      modules   @relation(fields: [module_id], references: [id])

  @@index([language_id], map: "language_id")
  @@index([module_id], map: "module_id")
  @@index([student_id], map: "student_id")
  @@unique([student_id, is_current], name: "unique_active_module")
}

model students {
  id                    Int               @id @default(autoincrement())
  first_name            String           @db.VarChar(100)
  last_name             String           @db.VarChar(100)
  email                 String           @unique(map: "email") @db.VarChar(100)
  initial_leveling_date DateTime?        @db.Date
  sid                   String?          @db.VarChar(50)
  company_id            Int
  cost_center_id        Int
  sector_id             Int
  created_at            DateTime?        @default(now()) @db.Timestamp(0)
  updated_at            DateTime?        @default(now()) @db.Timestamp(0)
  progress              student_progress[]
  attendance           Attendance[]
  examResults          ExamResult[]
  enrollments          CourseEnrollment[]
  groups               GroupStudent[]
  company              company          @relation(fields: [company_id], references: [id])

  @@index([company_id], map: "company_id")
  @@index([cost_center_id], map: "cost_center_id")
  @@index([sector_id], map: "sector_id")
}

model users {
  id         Int       @id @default(autoincrement())
  first_name String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  email      String    @unique(map: "email") @db.VarChar(100)
  password   String    @db.VarChar(60)
  role_id    Int
  belongs_to String?   @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  last_login DateTime? @db.Timestamp(0)
  active     Boolean?  @default(true)
  teacher    Teacher?

  @@index([role_id], map: "role_id")
}

model ProfessionalCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(50)
  teachers Teacher[]
}

model Teacher {
  id                     Int                 @id @default(autoincrement())
  lastName               String
  firstName              String
  email                  String              @unique
  phone                  String?
  CBU                    String?
  CUIT                   String?
  professionalCategoryId Int
  professionalCategory   ProfessionalCategory @relation(fields: [professionalCategoryId], references: [id])
  languages             TeacherLanguages[]   
  fictitiousSeniority   Int
  bostonSeniority       Int
  observations          String?              @db.Text
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  groups               Group[]             
  classes               Class[]              
  user                  users?               @relation(fields: [userId], references: [id])
  userId                Int?                 @unique

  @@index([userId])
}

model TeacherLanguages {
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
  teacherId  Int
  language   languages @relation(fields: [languageId], references: [id])
  languageId Int

  @@id([teacherId, languageId])
}

model GroupStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  isDefault   Boolean  @default(false)
  groups      Group[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudentStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  isDefault   Boolean  @default(false)
  students    GroupStudent[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Modality {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  groups      Group[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Group {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(100)
  teacherId    Int
  languageId   Int
  moduleId     Int
  modalityId   Int
  statusId     Int
  companyId    Int
  teacher      Teacher     @relation(fields: [teacherId], references: [id])
  language     languages   @relation(fields: [languageId], references: [id])
  module       modules     @relation(fields: [moduleId], references: [id])
  modality     Modality   @relation(fields: [modalityId], references: [id])
  status       GroupStatus @relation(fields: [statusId], references: [id])
  company      company     @relation(fields: [companyId], references: [id])
  startDate    DateTime    @db.Date
  endDate      DateTime    @db.Date
  students     GroupStudent[]
  schedule     Schedule?
  classes      Class[]
  exams        Exam[]
  enrollments  CourseEnrollment[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([teacherId])
  @@index([languageId])
  @@index([moduleId])
  @@index([modalityId])
  @@index([statusId])
  @@index([companyId])
}

model GroupStudent {
  id          Int           @id @default(autoincrement())
  groupId     Int
  group       Group         @relation(fields: [groupId], references: [id])
  studentId   Int
  student     students      @relation(fields: [studentId], references: [id])
  statusId    Int
  status      StudentStatus @relation(fields: [statusId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([groupId])
  @@index([studentId])
  @@index([statusId])
}

model Schedule {
  id         Int      @id @default(autoincrement())
  groupId    Int      @unique // One-to-one relation with Group
  group      Group    @relation(fields: [groupId], references: [id])
  companyId  Int
  company    company  @relation(fields: [companyId], references: [id])
  days       Json     // MariaDB soporta JSON desde la versi√≥n 10.2.7
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([groupId])
  @@index([companyId])
}

model Class {
  id          Int         @id @default(autoincrement())
  groupId     Int
  group       Group       @relation(fields: [groupId], references: [id])
  teacherId   Int
  teacher     Teacher     @relation(fields: [teacherId], references: [id])
  date        DateTime    @db.Date
  startTime   DateTime    @db.Time
  endTime     DateTime    @db.Time
  attendance  Attendance[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([groupId])
  @@index([teacherId])
}

model Attendance {
  id        Int       @id @default(autoincrement())
  classId   Int
  class     Class     @relation(fields: [classId], references: [id])
  studentId Int
  student   students  @relation(fields: [studentId], references: [id])
  status    String    @db.VarChar(20) // present, absent, late
  date      DateTime  @db.Date
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([classId])
  @@index([studentId])
}

model Exam {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.Text
  date        DateTime  @db.Date
  groupId    Int
  group      Group    @relation(fields: [groupId], references: [id])
  results     ExamResult[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([groupId])
}

model ExamResult {
  id        Int       @id @default(autoincrement())
  examId    Int
  exam      Exam      @relation(fields: [examId], references: [id])
  studentId Int
  student   students  @relation(fields: [studentId], references: [id])
  score     Float
  feedback  String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([examId])
  @@index([studentId])
}

model CourseEnrollment {
  id              Int       @id @default(autoincrement())
  studentId       Int
  student         students  @relation(fields: [studentId], references: [id])
  groupId        Int
  group          Group    @relation(fields: [groupId], references: [id])
  languageId      Int
  language        languages @relation(fields: [languageId], references: [id])
  moduleId        Int
  module          modules   @relation(fields: [moduleId], references: [id])
  attendance      Float     // Porcentaje de asistencia
  averageScore    Float     // Promedio de ex√°menes
  status          String    @db.VarChar(20) // active, completed, dropped
  startDate       DateTime  @db.Date
  endDate         DateTime? @db.Date
  observations    String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([studentId])
  @@index([groupId])
  @@index([languageId])
  @@index([moduleId])
}
